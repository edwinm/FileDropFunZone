// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Performs OCR on an image file and returns the extracted text.
 *
 * - ocrImageFile - A function that handles the OCR process.
 * - OCRImageFileInput - The input type for the ocrImageFile function.
 * - OCRImageFileOutput - The return type for the ocrImageFile function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const OCRImageFileInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo to run OCR on, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type OCRImageFileInput = z.infer<typeof OCRImageFileInputSchema>;

const OCRImageFileOutputSchema = z.object({
  extractedText: z.string().describe('The extracted text from the image.'),
});
export type OCRImageFileOutput = z.infer<typeof OCRImageFileOutputSchema>;

export async function ocrImageFile(input: OCRImageFileInput): Promise<OCRImageFileOutput> {
  return ocrImageFileFlow(input);
}

const ocrPrompt = ai.definePrompt({
  name: 'ocrPrompt',
  input: {schema: OCRImageFileInputSchema},
  output: {schema: OCRImageFileOutputSchema},
  prompt: `Extract the text from the following image: {{media url=photoDataUri}}`,
});

const ocrImageFileFlow = ai.defineFlow(
  {
    name: 'ocrImageFileFlow',
    inputSchema: OCRImageFileInputSchema,
    outputSchema: OCRImageFileOutputSchema,
  },
  async input => {
    const {output} = await ocrPrompt(input);
    return output!;
  }
);
